<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.onap.ccsdk.parent</groupId>
		<artifactId>odlparent-lite</artifactId>
		<version>1.2.2-SNAPSHOT</version>
		<relativePath />
	</parent>

	<groupId>org.onap.ccsdk.distribution</groupId>
	<artifactId>distribution-odlwt-poc5-alpine</artifactId>
	<version>0.4.2-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>ccsdk-distribution :: odlsli-alpine :: CENTENNIAL POC5</name>
	<description>Creates Alpine-based ODL-CENTENNIAL POC5 Docker container</description>
	<organization>
		<name>openECOMP</name>
	</organization>

	<properties>
		<base.image.repo>onap/ccsdk-odl-fluorine-alpine-image:0.4.2-STAGING-20190328T124418Z</base.image.repo>
		<image.name>oof-pci/ccsdk-odlwt-alpine-image</image.name>
		<ccsdk.project.version>${project.version}</ccsdk.project.version>
		<ccsdk.build.timestamp>${maven.build.timestamp}</ccsdk.build.timestamp>
		<ccsdk.features.version>${project.version}</ccsdk.features.version>
		<docker.buildArg.https_proxy>${https_proxy}</docker.buildArg.https_proxy>
		<maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>
		<opendaylight.root>opt/opendaylight</opendaylight.root>
		<docker.push.phase>deploy</docker.push.phase>
		<docker.verbose>true</docker.verbose>
		<ansible.gpg.key>93C4A3FD7BB9C367</ansible.gpg.key>

		<!-- CENTENNIAL Components -->
		<wt.version>0.7.3-SNAPSHOT</wt.version>
		<wt.poc.downloadlink>https://cloud-highstreet-technologies.com/nextcloud/index.php/s/G2BgQXbD8gNYdHN/download</wt.poc.downloadlink>
		<wt.poc.filename>karaf-0.8.3-poc5.016.015.tar.gz</wt.poc.filename>

		<!-- odl.repolist.features and odl.boot.features.all are used by dockerfile.
			Contains all repos and features to start -->
		<sdnr.wt.repo>mvn:org.onap.ccsdk.features.sdnr.wt/sdnr-wt-feature-aggregator/${project.version}/xml/features</sdnr.wt.repo>
		<odl.repolist.features>${sdnr.wt.repo}</odl.repolist.features>

		<odl.boot.features.odl>odl-mdsal-all,odl-mdsal-apidocs,odl-daexim-all</odl.boot.features.odl>
		<ccsdk.odl.features>odl-netconf-topology,odl-netconf-connector,sdnr-wt-feature-aggregator</ccsdk.odl.features>
		<odl.boot.features.all>${odl.boot.features.odl}</odl.boot.features.all>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.onap.ccsdk.features.sdnr.wt</groupId>
			<artifactId>sdnr-wt-feature-aggregator-installer</artifactId>
			<version>${ccsdk.features.version}</version>
			<classifier>repo</classifier>
			<type>zip</type>
		</dependency>
	</dependencies>
	<build>
		<extensions>
			<extension>
				<!-- this extension is required by wagon in order to pass the proxy -->
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-http-lightweight</artifactId>
				<version>2.2</version>
			</extension>
		</extensions>
		<plugins>
			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<version>1.0</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>${basedir}/src/main/scripts/TagVersion.groovy</source>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-dockerfile</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<includes>
										<include>Dockerfile</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-scripts</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk/bin</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/scripts</directory>
									<includes>
										<include>*.sh</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-wireless-transport-addon</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/wtaddon</directory>
									<includes>
										<include>*</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack features</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
							<excludeTransitive>true</excludeTransitive>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
					<execution>
						<id>unpack dgs</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk</outputDirectory>
							<artifactItems>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>platform-logic-installer</artifactId>
									<version>${project.version}</version>
									<type>zip</type>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.5.0</version>
				<executions>
					<execution>
						<id>change shell permissions</id>
						<phase>process-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>/usr/bin/find</executable>
							<arguments>
								<argument>${basedir}/target/docker-stage/opt/onap/ccsdk</argument>
								<argument>-name</argument>
								<argument>*.sh</argument>
								<argument>-exec</argument>
								<argument>chmod</argument>
								<argument>+x</argument>
								<argument>{}</argument>
								<argument>;</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>download wireless transport applications</id>
						<phase>process-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>src/main/wtaddon/wtaddon.sh</executable>
							<arguments>
								<argument>${basedir}/target/docker-stage</argument>
								<argument>${wt.poc.downloadlink}</argument>
								<argument>${wt.poc.filename}</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>docker</id>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.16.5</version>
						<inherited>false</inherited>
						<configuration>
							<images>
								<image>
									<name>${image.name}</name>
									<build>
										<cleanup>try</cleanup>
										<dockerFileDir>${basedir}/target/docker-stage</dockerFileDir>
										<dockerFile>${basedir}/target/docker-stage/Dockerfile</dockerFile>
										<tags>
											<tag>${project.docker.latestminortag.version}</tag>
											<tag>${project.docker.latestfulltag.version}</tag>
											<tag>${project.docker.latesttagtimestamp.version}</tag>
										</tags>
									</build>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>generate-images</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>

							<execution>
								<id>push-images</id>
								<phase>${docker.push.phase}</phase>
								<goals>
									<goal>build</goal>
									<goal>push</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
