package org.opendaylight.yang.gen.v1.urn.onf.otcc.wireless.yang.radio.access.rev180408;
import org.opendaylight.yangtools.yang.binding.DataObject;
import org.opendaylight.yangtools.yang.common.QName;

/**
 * Table indicating the measurement of the discovered carrier. The information 
 * stored in this object is strictly in the physical layer level and may not 
 * necessarily be associated with any particular E-UTRAN cell (e.g. interference 
 * level generated by sources other than E-UTRAN cell).
 *
 * <p>
 * This class represents the following YANG schema fragment defined in module <b>bbf-tr-196-2-0-3-full</b>
 * <pre>
 * grouping rem-lte-carrier-meas-g {
 *     leaf enable {
 *         type boolean;
 *     }
 *     leaf alias {
 *         type string;
 *     }
 *     leaf carrier-arfcndl {
 *         type carrier-arfcndl;
 *     }
 *     leaf carrier-ch-width {
 *         type carrier-ch-width;
 *     }
 *     leaf carrier-rssi {
 *         type carrier-rssi;
 *     }
 * }
 * </pre>The schema path to identify an instance is
 * <i>bbf-tr-196-2-0-3-full/rem-lte-carrier-meas-g</i>
 *
 */
public interface RemLteCarrierMeasG
    extends
    DataObject
{



    public static final QName QNAME = org.opendaylight.yangtools.yang.common.QName.create("urn:onf:otcc:wireless:yang:radio-access",
        "2018-04-08", "rem-lte-carrier-meas-g").intern();

    /**
     * Enables or disables the CarrierMeas entry.
     *
     *
     *
     * @return <code>java.lang.Boolean</code> <code>enable</code>, or <code>null</code> if not present
     */
    java.lang.Boolean isEnable();
    
    /**
     * {{datatype|expand}}
     *
     *
     *
     * @return <code>java.lang.String</code> <code>alias</code>, or <code>null</code> if not present
     */
    java.lang.String getAlias();
    
    /**
     * Lower bound of the EUTRA ARFCN as specified in {{bibref|3GPP-TS.36.101|Section 
     * 5.7.3}} in the DL direction that is requested to measure. Unit in {{units}}.
     *
     *
     *
     * @return <code>java.lang.Long</code> <code>carrierArfcndl</code>, or <code>null</code> if not present
     */
    java.lang.Long getCarrierArfcndl();
    
    /**
     * Number of {{units}} in DL direction, as specified in 
     * {{bibref|3GPP-TS.36.101|Section 5.6}}, that is requested to measure. The range 
     * bounded by {{param|CarrierARFCNDL}} as the lower bound and the value of 
     * ({{param|CarrierARFCNDL}} + {{param}}) as the upper bound expresses the total 
     * carrier frequency range to be measured.
     *
     *
     *
     * @return <code>java.lang.Long</code> <code>carrierChWidth</code>, or <code>null</code> if not present
     */
    java.lang.Long getCarrierChWidth();
    
    /**
     * Received Signal Strength Indicator (RSSI) as specified in 
     * {{bibref|3GPP-TS.36.214|Sec 5.1.3}} over the carrier frequency range from 
     * {{param|CarrierARFCNDL}} as the lower bound and the value of 
     * ({{param|CarrierARFCNDL}} + {{param|CarrierChWidth}}) as the upper bound.
     *
     *
     *
     * @return <code>java.lang.Long</code> <code>carrierRssi</code>, or <code>null</code> if not present
     */
    java.lang.Long getCarrierRssi();

}

